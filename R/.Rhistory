compareCounterfactuals<-function(scenario,simulated.bids.Model1,simulated.bids.Model2,cf.edgelist.Model1,cf.edgelist.Model2){
#Create Tables from empÃ­rical
baseline.model1.stats1=simulated.bids.Model1%>%summarise(mean.bid=mean(bid),sd.bid=sd(bid))
baseline.model1.stats2=simulated.bids.Model1%>%group_by(ID)%>%summarise(participants=length(ID))%>%summarise(mean.participants=mean(participants),sd.participants=sd(participants))
baseline.model1.stats=data.frame(baseline.model1.stats1,baseline.model1.stats2)%>%mutate(Simulation='Baseline',Type='Model 1')%>%pivot_longer(cols = mean.bid:sd.participants)
baseline.model2.stats1=simulated.bids.Model2%>%summarise(mean.bid=mean(bid),sd.bid=sd(bid))
baseline.model2.stats2=simulated.bids.Model2%>%group_by(ID)%>%summarise(participants=length(ID))%>%summarise(mean.participants=mean(participants),sd.participants=sd(participants))
baseline.model2.stats=data.frame(baseline.model2.stats1,baseline.model2.stats2)%>%mutate(Simulation='Baseline',Type='Model 2')%>%pivot_longer(cols = mean.bid:sd.participants)
##Create Counterfactual Statistics
cf.re.Model1.stats1=cf.edgelist.Model1%>%summarise(mean.bid=mean(bid),sd.bid=sd(bid))
cf.re.Model1.stats2=cf.edgelist.Model1%>%group_by(ID)%>%summarise(participants=length(ID))%>%summarise(mean.participants=mean(participants),sd.participants=sd(participants))
cf.re.Model1.stats=data.frame(cf.re.Model1.stats1,cf.re.Model1.stats2)%>%mutate(Simulation='Counterfactual',Type='Model 1')%>%pivot_longer(cols = mean.bid:sd.participants)
cf.re.Model2.stats1=cf.edgelist.Model2%>%summarise(mean.bid=mean(bid),sd.bid=sd(bid))
cf.re.Model2.stats2=cf.edgelist.Model2%>%group_by(ID)%>%summarise(participants=length(ID))%>%summarise(mean.participants=mean(participants),sd.participants=sd(participants))
cf.re.Model2.stats=data.frame(cf.re.Model2.stats1,cf.re.Model2.stats2)%>%mutate(Simulation='Counterfactual',Type='Model 2')%>%pivot_longer(cols = mean.bid:sd.participants)
comparison.table=rbind(baseline.model1.stats,baseline.model2.stats,cf.re.Model1.stats,cf.re.Model2.stats)
##Merge
comparison.table.output=comparison.table%>%pivot_wider(id_cols = c(Type,name),names_from = Simulation,values_from=value)%>%
mutate(difference=(Counterfactual-Baseline))
comparison.table.output2=comparison.table.output%>%dplyr::select(Type,name,difference)%>%
pivot_wider(id_cols = Type,names_from=name,values_from=difference)%>%mutate(Scenario=scenario)%>%
dplyr::select(Scenario, everything())%>%mutate_if(is.numeric, funs((signif(., 3))))
return(comparison.table.output2)
}
#Top Degrees
increaseDensityNetwork<-function(extraProp = 0.1,edgelist.original,mode){
degree.bottom.sim=edgelist.original%>%group_by(v.bottom)%>%summarise(d=length(unique(v.top)))
degree.top.sim=edgelist.original%>%group_by(v.top)%>%summarise(d=length(unique(v.bottom)))
number_extra_edges=round(nrow(edgelist.original)*(prop.extra),0)
if(mode=='Random'){
cf.randomedges.extrabottom=degree.bottom.sim$v.bottom[sample(x = seq_len(nrow(degree.bottom.sim)),replace = T,size=number_extra_edges)]
cf.randomedges.extratop=degree.top.sim$v.top[sample(x = seq_len(nrow(degree.top.sim)),replace = T,size=number_extra_edges)]
cf.randomedges.edgelist=data.frame(v.bottom=extra.edges.bottom,v.top=extra.edges.top)
cf.randomedges.edgelist=rbind(cf.randomedges.edgelist,edgelist.original)
return(cf.randomedges.edgelist)
}
if(mode=='High'||mode=='Low'){
q_filter=ifelse(mode=='High',yes = 4,no = 1)
edgelist.original.labels=edgelist.original%>%mutate(v.top=paste0('g',v.top),v.bottom=paste0('f',v.bottom))%>%as.matrix()
graph.sim.original=graph_from_edgelist(el=edgelist.original.labels, directed = F)
#bet <- betweenness(graph.sim.original)%>%as.vector()
#clos <- closeness(graph.sim.original)
eig <- eigen_centrality(graph.sim.original)$vector
centralities=data.frame(v=names(eig),eig=eig)%>%mutate(type=ifelse(substr(v,1,1)=='g',yes = 'v.top',no = 'v.bottom'))
centralities.bottom=centralities%>%filter(type=='v.bottom')%>%mutate(v.bottom=substr(v,2,nchar(v)))%>%dplyr::select(v.bottom,eig)%>%arrange(-eig)%>%mutate(q=ntile(eig,n = 4))%>%filter(q==q_filter)
centralities.top=centralities%>%filter(type=='v.top')%>%mutate(v.top=substr(v,2,nchar(v)))%>%dplyr::select(v.top,eig)%>%arrange(-eig)%>%mutate(q=ntile(eig,n = 4))%>%filter(q==q_filter)
cf.randomedges.extrabottom=centralities.bottom$v.bottom[sample(x = seq_len(nrow(centralities.bottom)),replace = T,size=number_extra_edges)]
cf.randomedges.extratop=centralities.top$v.top[sample(x = seq_len(nrow(centralities.top)),replace = T,size=number_extra_edges)]
cf.randomedges.edgelist=data.frame(v.bottom=extra.edges.bottom,v.top=extra.edges.top)
cf.randomedges.edgelist=rbind(cf.randomedges.edgelist,edgelist.original)
return(cf.randomedges.edgelist)
}
}
#Fit Bids Given Participants
params.df=fitAuctionBids(degree.bottom = degree.bottom.1,df.period1)
params.df.expand=params.df%>%uncount()
lm.mu=lm(mu~poly(nParticipants,2)+poly(d,2),data =params.df )
lm.sd=lm(sd~poly(nParticipants,2),data =params.df )
aux=df.period1%>%dplyr::select(RutProveedor,MCA_MPO,Codigo)%>%left_join(degree.bottom.1)%>%group_by(Codigo)%>%mutate(nParticipants=length(Codigo))%>%filter(d<20)
aux.sd=aux%>%group_by(d,nParticipants)%>%summarise(sd=sd(MCA_MPO))
lm.mu=lm(MCA_MPO~poly(nParticipants,2)+poly((d),2),data =aux )
lm.sd=lm(sd~poly(nParticipants,2),data =aux.sd)
###############Fit Second Model
sdparam=0.08
errorGov=0.01
scaleparam=0.05
df=50
results=data.frame()
#First Set
possible_sd=seq(0.007,0.12,by = 0.006)
possible_error=seq(1e-2,0.12,by = 0.04)
possible_minprofit=seq(0,0.025,by = 0.0025)
feasible_space=expand.grid(possible_sd,possible_minprofit,possible_error)%>%as.data.frame()
colnames(feasible_space)<-c('possible_sd','possible_minprofit','possible_error')
feasible_space=feasible_space%>%arrange(possible_sd)
head(feasible_space,n=30)
replications=3#nrow(feasible_space)
nrow(feasible_space)
results=data.frame()
min_n=rep(100,300)
est_time=nrow(feasible_space)*40/3600
bics
bics
#Simulate Network of bids
simulated.2=simBipartiteNetwork(alpha.top.nbin = alpha.top.nbin, alpha.bottom.1 = alpha.bottom.1, ntop = n.top.2,
nbottom = n.bottom.2,m_ln =m_ln )
alpha.top.nbin=(fitdist(degree.top.1$d,"nbinom",method = 'mle',discrete = T))$estimate
alpha.bottom.1ln=get_parameter_ln(degree.bottom.1$d)
m_ln = dislnorm$new(degree.bottom.1$d)
m_ln$setXmin(1)
est_lm = estimate_pars(m_ln)
m_ln$setPars(est_lm)
n.top.2=nrow(degree.top.2)
n.bottom.2=nrow(degree.bottom.2)
nbottom=nrow(degree.bottom.2)
n.top.1=nrow(degree.top.1)
n.bottom.1=nrow(degree.bottom.1)
nbottom.1=nrow(degree.bottom.1)
#Simulate Network of bids
simulated.2=simBipartiteNetwork(alpha.top.nbin = alpha.top.nbin, alpha.bottom.1 = alpha.bottom.1, ntop = n.top.2,
nbottom = n.bottom.2,m_ln =m_ln )
## Generate and simulate
alpha.top.nbin=(fitdist(degree.top.1$d,"nbinom",method = 'mle',discrete = T))$estimate
#Simulate Network of bids
simulated.2=simBipartiteNetwork(alpha.top.nbin = alpha.top.nbin, alpha.bottom.1 = alpha.bottom.1, ntop = n.top.2,
nbottom = n.bottom.2,m_ln =m_ln )
SimNetworkNodeDistribution<-function(alpha.top.nbin,alpha.bottom.1,ntop,nbottom,m_ln){
simulated.top=c(1000)
simulated.bottom=c(0)
while(abs(sum(simulated.top)-sum(simulated.bottom))>200){
print(abs(sum(simulated.top)-sum(simulated.bottom)))
simulated.top=rnbinom(n=ntop,size=alpha.top.nbin[1],mu = alpha.top.nbin[2] )
#n.bottom.2.theoric=round(mean(simulated.top)/mean.theorical*length(simulated.top),0)
simulated.bottom=dist_rand(m=m_ln, n = nbottom)
}
#return(list(top=simulated.top,bottom=simulated.bottom))
print('First stage completed')
while(abs(sum(simulated.top)-sum(simulated.bottom))>10){
print(abs(sum(simulated.top)-sum(simulated.bottom)))
#print(length(simulated.top))
simulated.bottom=simulated.bottom[1:(length(simulated.bottom)-5)]
simulated.top=simulated.top[1:(length(simulated.top)-5)]
extra.top=rnbinom(n=5,size=alpha.top.nbin[1],mu = alpha.top.nbin[2] )
extra.bottom=dist_rand(m=m_ln, n = 5)
simulated.top=c(simulated.top,extra.top)
simulated.bottom=c(simulated.bottom,extra.bottom)
}
return(list(top=simulated.top,bottom=simulated.bottom))
}
SimNetworkNodeDistribution<-function(alpha.top.nbin,alpha.bottom.1,ntop,nbottom,m_ln){
simulated.top=c(1000)
simulated.bottom=c(0)
while(abs(sum(simulated.top)-sum(simulated.bottom))>200){
print(abs(sum(simulated.top)-sum(simulated.bottom)))
simulated.top=rnbinom(n=ntop,size=alpha.top.nbin[1],mu = alpha.top.nbin[2] )
#n.bottom.2.theoric=round(mean(simulated.top)/mean.theorical*length(simulated.top),0)
simulated.bottom=dist_rand(m=m_ln, n = nbottom)
}
#return(list(top=simulated.top,bottom=simulated.bottom))
print('First stage completed')
while(abs(sum(simulated.top)-sum(simulated.bottom))>10){
print(abs(sum(simulated.top)-sum(simulated.bottom)))
#print(length(simulated.top))
simulated.bottom=simulated.bottom[1:(length(simulated.bottom)-5)]
simulated.top=simulated.top[1:(length(simulated.top)-5)]
extra.top=rnbinom(n=5,size=alpha.top.nbin[1],mu = alpha.top.nbin[2] )
extra.bottom=dist_rand(m=m_ln, n = 5)
simulated.top=c(simulated.top,extra.top)
simulated.bottom=c(simulated.bottom,extra.bottom)
}
return(list(top=simulated.top,bottom=simulated.bottom))
}
#Simulate Network of bids
simulated.2=simBipartiteNetwork(alpha.top.nbin = alpha.top.nbin, alpha.bottom.1 = alpha.bottom.1, ntop = n.top.2,
nbottom = n.bottom.2,m_ln =m_ln )
m_ln
alpha.bottom.1ln=get_parameter_ln(degree.bottom.1$d)
m_ln = dislnorm$new(degree.bottom.1$d)
m_ln$setXmin(1)
est_lm = estimate_pars(m_ln)
m_ln$setPars(est_lm)
#Simulate Network of bids
simulated.2=simBipartiteNetwork(alpha.top.nbin = alpha.top.nbin, alpha.bottom.1 = alpha.bottom.1, ntop = n.top.2,
nbottom = n.bottom.2,m_ln =m_ln )
n.bottom.2=nrow(degree.bottom.2)
nbottom=nrow(degree.bottom.2)
n.top.1=nrow(degree.top.1)
n.bottom.1=nrow(degree.bottom.1)
nbottom.1=nrow(degree.bottom.1)
#Simulate Network of bids
simulated.2=simBipartiteNetwork(alpha.top.nbin = alpha.top.nbin, alpha.bottom.1 = alpha.bottom.1, ntop = n.top.2,
nbottom = n.bottom.2,m_ln =m_ln )
n.top.2=nrow(degree.top.2)
n.bottom.2=nrow(degree.bottom.2)
nbottom=nrow(degree.bottom.2)
degree.bottom.2=df.period2%>%group_by(RutProveedor)%>%summarise(d=length(unique(NombreOrganismo)))%>%arrange(-d)%>%mutate(v.bottom=seq_len(nrow(degree.bottom.2)))
degree.bottom.2=df.period2%>%group_by(RutProveedor)%>%summarise(d=length(unique(NombreOrganismo)))%>%arrange(-d)%>%mutate(v.bottom=seq_len(nrow(degree.bottom.2)))
degree.bottom.2=df.period2%>%group_by(RutProveedor)%>%summarise(d=length(unique(NombreOrganismo)))%>%arrange(-d)
degree.bottom.2=degree.bottom.2%>%mutate(v.bottom=seq_len(nrow(degree.bottom.2)))
degree.top.1=df.period1%>%group_by(NombreOrganismo)%>%summarise(d=length(unique(RutProveedor)))%>%arrange(-d)
degree.top.1=degree.top.1%>%mutate(v.top=seq_len(nrow(degree.top.1)))
degree.top.2=df.period2%>%group_by(NombreOrganismo)%>%summarise(d=length(unique(RutProveedor)))%>%arrange(-d)
degree.top.2=degree.top.2%>%mutate(v.top=seq_len(nrow(degree.top.2)))
#Simulate Network of bids
simulated.2=simBipartiteNetwork(alpha.top.nbin = alpha.top.nbin, alpha.bottom.1 = alpha.bottom.1, ntop = n.top.2,
nbottom = n.bottom.2,m_ln =m_ln )
n.top.2=nrow(degree.top.2)
n.bottom.2=nrow(degree.bottom.2)
nbottom=nrow(degree.bottom.2)
n.top.1=nrow(degree.top.1)
n.bottom.1=nrow(degree.bottom.1)
nbottom.1=nrow(degree.bottom.1)
#Simulate Network of bids
simulated.2=simBipartiteNetwork(alpha.top.nbin = alpha.top.nbin, alpha.bottom.1 = alpha.bottom.1, ntop = n.top.2,
nbottom = n.bottom.2,m_ln =m_ln )
degree.bottom.sim=simulated.2%>%group_by(v.bottom)%>%summarise(d=length(unique(v.top)))
degree.top.sim=simulated.2%>%group_by(v.top)%>%summarise(d=length(unique(v.bottom)))
### Simulate Model 1
simulated.bids.Model1=createBidSim_Mechanic(edgelist.sim.2 = simulated.2,degree.bottom.sim = degree.bottom.sim,lambda.df = lambda.df,params.df = params.df,lm.mu = lm.mu,lm.sd = lm.sd)
createBidSim<-function(simulated.2,sdparam,errorGov){
vert.top.sim2=simulated.2%>%group_by(v.top)%>%count()
vert.bottom.sim2=simulated.2%>%group_by(v.bottom)%>%count()
min_n=rep(0,300)
#1. Create monte carlo distribution of minimum values
for (i in seq_len(300)) {
min_j=rep(0,200)
for (j in seq_len(1000)) {
min_j[j]=min(rnorm(n = i,mean = 1,sd = sdparam)%>%as.vector())
#min_j[j]=min(rt(n = i,df=df)%>%as.vector())
#min_j[j]=min(rlogis(n = 1000, location = 1, scale = 0.001))
#min_j[j]=min(rlnorm(n = i,meanlog = 0,sdlog = 0.25)%>%as.vector())
#min_j[j]=min(runif(n = i,min=0.6,max=1.5)%>%as.vector())
}
min_n[i]=mean(min_j)
#vec_min=rt(n = 4,df = 4,),mean = 1,sd = 0.05)%>%as.vector()
#min_n[i]=min(vec_min)
}
min_n[1]=2#Immportante que sea dos
# 2. Simulate Bidding Distributions
bids.sim=data.frame()
for (v in seq_len(nrow(vert.top.sim2))) {
edges.gov=simulated.2%>%filter(v.top==v)
connected.firms=vert.bottom.sim2%>%filter(v.bottom%in%edges.gov$v.bottom)
totfirms=nrow(connected.firms)
#commoncomp=rnorm(n = 1,mean = 0,sd = 0.1)
commoncomp=runif(n = 1,min = -errorGov,max = errorGov)+rbinom(n = 1,prob = 0.1,size = 1)*runif(n=1,-0.8,0.8)
#commoncomp=rt(n = 1,df=10)+1
valuations=rnorm(n = totfirms,mean = 1,sd = sdparam)%>%as.vector()
#valuations=rt(n = totfirms,df=df)%>%as.vector()+1
#valuations=rlnorm(n = totfirms,mean = 0,sdlog = 0.25)%>%as.vector()
#valuations=rlogis(n = totfirms, location = 1, scale = scaleparam)
#valuations=runif(n = totfirms,min = 0.6,max=1.5)%>%as.vector()
#connected.firms.vals=connected.firms%>%cbind(valuation=valuations)%>%mutate(binbid=ifelse(valuation<(1/log(1+nrow(connected.firms))),yes = 1,no = 0))
connected.firms.vals=connected.firms%>%cbind(valuation=valuations)%>%mutate(binbid=ifelse((commoncomp+valuation)<=commoncomp+min_n[1+max(0,ceiling((log(totfirms)-0*rbinom(n=1,size = 1,prob = 0.5))))],yes = 1,no = 0))
submitted.bids.unit=connected.firms.vals%>%filter(binbid==1)%>%as.data.frame()%>%mutate(ID=v,bid=valuation+commoncomp)
bids.sim=rbind(submitted.bids.unit,bids.sim)
}
#3. Select which ones will bid
final.bids=data.frame()
for(firm in seq_len(max(bids.sim$v.bottom))) {
firm.possible=bids.sim%>%filter(v.bottom==firm&binbid==1)
firm.truly=  firm.possible%>%arrange(valuation)%>%slice(1)
final.bids=rbind(firm.truly,final.bids)
}
return(final.bids)
}
createBidSim_NetworkEffects<-function(simulated.2,sdparam,errorGov){
vert.top.sim2=simulated.2%>%group_by(v.top)%>%count()
vert.bottom.sim2=simulated.2%>%group_by(v.bottom)%>%count()
min_n=rep(0,300)
#1. Create monte carlo distribution of minimum values
for (i in seq_len(300)) {
min_j=rep(0,200)
for (j in seq_len(1000)) {
min_j[j]=min(rnorm(n = i,mean = 1,sd = sdparam)%>%as.vector())
#min_j[j]=min(rt(n = i,df=df)%>%as.vector())
#min_j[j]=min(rlogis(n = 1000, location = 1, scale = 0.001))
#min_j[j]=min(rlnorm(n = i,meanlog = 0,sdlog = 0.25)%>%as.vector())
#min_j[j]=min(runif(n = i,min=0.6,max=1.5)%>%as.vector())
}
min_n[i]=mean(min_j)
#vec_min=rt(n = 4,df = 4,),mean = 1,sd = 0.05)%>%as.vector()
#min_n[i]=min(vec_min)
}
min_n[1]=2#Immportante que sea dos
# 2. Simulate Bidding Distributions
bids.sim=data.frame()
for (v in seq_len(nrow(vert.top.sim2))) {
edges.gov=simulated.2%>%filter(v.top==v)
connected.firms=vert.bottom.sim2%>%filter(v.bottom%in%edges.gov$v.bottom)
totfirms=nrow(connected.firms)
#Adjust the expected number
totfirms.adjusted=ceiling(sum(1/(connected.firms$n)))
#commoncomp=rnorm(n = 1,mean = 0,sd = 0.1)
commoncomp=runif(n = 1,min = -errorGov,max = errorGov)+rbinom(n = 1,prob = 0.1,size = 1)*runif(n=1,-0.8,0.8)
#commoncomp=rt(n = 1,df=10)+1
valuations=rnorm(n = totfirms,mean = 1,sd = sdparam)%>%as.vector()
#valuations=rt(n = totfirms,df=df)%>%as.vector()+1
#valuations=rlnorm(n = totfirms,mean = 0,sdlog = 0.25)%>%as.vector()
#valuations=rlogis(n = totfirms, location = 1, scale = scaleparam)
#valuations=runif(n = totfirms,min = 0.6,max=1.5)%>%as.vector()
#connected.firms.vals=connected.firms%>%cbind(valuation=valuations)%>%mutate(binbid=ifelse(valuation<(1/log(1+nrow(connected.firms))),yes = 1,no = 0))
connected.firms.vals=connected.firms%>%cbind(valuation=valuations)%>%mutate(binbid=ifelse((commoncomp+valuation)<=commoncomp+min_n[max(0,(totfirms.adjusted))],yes = 1,no = 0))
submitted.bids.unit=connected.firms.vals%>%filter(binbid==1)%>%as.data.frame()%>%mutate(ID=v,bid=valuation+commoncomp)
bids.sim=rbind(submitted.bids.unit,bids.sim)
}
#3. Select which ones will bid
final.bids=data.frame()
for(firm in seq_len(max(bids.sim$v.bottom))) {
firm.possible=bids.sim%>%filter(v.bottom==firm&binbid==1)
firm.truly=  firm.possible%>%arrange(valuation)%>%slice(1)
final.bids=rbind(firm.truly,final.bids)
}
return(final.bids)
}
createBidSim_Optimal<-function(simulated.2,sdparam,errorGov,minprofit){
vert.top.sim2=simulated.2%>%group_by(v.top)%>%count()
vert.bottom.sim2=simulated.2%>%group_by(v.bottom)%>%count()
if(FALSE){
#1. Create monte carlo distribution of minimum values
for (i in seq_len(300)) {
min_j=rep(0,200)
for (j in seq_len(1000)) {
min_j[j]=min(rnorm(n = i,mean = 1,sd = sdparam)%>%as.vector())
#min_j[j]=min(rt(n = i,df=df)%>%as.vector())
#min_j[j]=min(rlogis(n = 1000, location = 1, scale = 0.001))
#min_j[j]=min(rlnorm(n = i,meanlog = 0,sdlog = 0.25)%>%as.vector())
#min_j[j]=min(runif(n = i,min=0.6,max=1.5)%>%as.vector())
}
min_n[i]=mean(min_j)
#vec_min=rt(n = 4,df = 4,),mean = 1,sd = 0.05)%>%as.vector()
#min_n[i]=min(vec_min)
}
min_n[1]=2#Immportante que sea dos
}
# 2. Simulate Bidding Distributions
bids.sim=data.frame()
for (v in seq_len(nrow(vert.top.sim2))) {
edges.gov=simulated.2%>%filter(v.top==v)
connected.firms=vert.bottom.sim2%>%filter(v.bottom%in%edges.gov$v.bottom)
#connected.firms=connected.firms%>%sample_n(size = (nrow(connected.firms)))
totfirms=nrow(connected.firms)
commoncomp=runif(n = 1,min = -errorGov,max = errorGov)+rbinom(n = 1,prob = 0.1,size = 1)*runif(n=1,-0.8,0.8)
valuations=rnorm(n = totfirms,mean = 1,sd = sdparam)%>%as.vector()
##Create optimal payoffs
connected.firms.vals=connected.firms%>%cbind(valuation=valuations)%>%mutate(binbid=NA,bid=NA,profit=NA)%>%mutate(valuation=min(valuation,2))
for (firm in seq_len(nrow(connected.firms.vals))) {
possiblebids=seq(connected.firms.vals$valuation[firm],2.02,by=0.02)
possiblevaluation=rep(connected.firms.vals$valuation[firm],length(possiblebids))
profits=(possiblebids-possiblevaluation)*(1-pnorm(possiblebids, 1, sd=sdparam)**(1+ceiling(log(totfirms))) )
expected_max=max(profits)
max_bid=possiblebids[which.max(profits)]
connected.firms.vals$bid[firm]=max_bid
connected.firms.vals$binbid[firm]=as.numeric(expected_max>minprofit)
connected.firms.vals$profit[firm]=as.numeric(expected_max)
}
#connected.firms.vals=connected.firms%>%cbind(valuation=valuations)%>%mutate(binbid=ifelse(valuation<(1/log(1+nrow(connected.firms))),yes = 1,no = 0))
#connected.firms.vals=connected.firms%>%cbind(valuation=valuations)%>%mutate(binbid=ifelse((commoncomp+valuation)<=commoncomp+min_n[1+max(0,ceiling((log(totfirms)-0*rbinom(n=1,size = 1,prob = 0.5))))],yes = 1,no = 0))
submitted.bids.unit=connected.firms.vals%>%filter(binbid==1)%>%as.data.frame()%>%mutate(ID=v,bid=valuation+commoncomp)
if(nrow(submitted.bids.unit)>0){
bids.sim=rbind(submitted.bids.unit,bids.sim)
}
}
#3. Select which ones will bid
final.bids=data.frame()
if(length(bids.sim$v.bottom)>0){
for(firm in seq_len(max(bids.sim$v.bottom))) {
firm.possible=bids.sim%>%filter(v.bottom==firm&binbid==1)
firm.truly=  firm.possible%>%arrange(profit)%>%slice(1)
final.bids=rbind(firm.truly,final.bids)
}
}
return(final.bids)
}
createBidSim_Optimal_Par<-function(simulated.2,sdparam,errorGov,minprofit){
cores=detectCores()
cl <- makeCluster(cores[1]-2) #not to overload your computer
registerDoParallel(cl)
vert.top.sim2=simulated.2%>%group_by(v.top)%>%count()
vert.bottom.sim2=simulated.2%>%group_by(v.bottom)%>%count()
#1. Create monte carlo distribution of minimum values
# 2. Simulate Bidding Distributions
iterations=nrow(vert.top.sim2)
bids.sim=foreach(v =seq_len(iterations), .combine=rbind, .packages=c("dplyr",'magrittr','MASS','waddR'),.verbose=F) %dopar%  {
edges.gov=simulated.2%>%filter(v.top==v)
connected.firms=vert.bottom.sim2%>%filter(v.bottom%in%edges.gov$v.bottom)
connected.firms=connected.firms%>%slice_sample(n = ceiling(sqrt(nrow(connected.firms))))
totfirms=nrow(connected.firms)
commoncomp=runif(n = 1,min = -errorGov,max = errorGov)+rbinom(n = 1,prob = 0.1,size = 1)*runif(n=1,-0.8,0.8)
valuations=rnorm(n = totfirms,mean = 1,sd = sdparam)%>%as.vector()
##Create optimal payoffs
connected.firms.vals=connected.firms%>%cbind(valuation=valuations)%>%mutate(binbid=NA,bid=NA,profit=NA)%>%mutate(valuation=min(valuation,2))
for (firm in seq_len(nrow(connected.firms.vals))) {
possiblebids=seq(connected.firms.vals$valuation[firm],2.02,by=0.02)
possiblevaluation=rep(connected.firms.vals$valuation[firm],length(possiblebids))
profits=(possiblebids-possiblevaluation)*(1-pnorm(possiblebids, 1, sd=sdparam)**(1+ceiling(log(totfirms))) )
expected_max=max(profits)
max_bid=possiblebids[which.max(profits)]
connected.firms.vals$bid[firm]=max_bid
connected.firms.vals$binbid[firm]=as.numeric(expected_max>minprofit)
connected.firms.vals$profit[firm]=as.numeric(expected_max)
}
#connected.firms.vals=connected.firms%>%cbind(valuation=valuations)%>%mutate(binbid=ifelse(valuation<(1/log(1+nrow(connected.firms))),yes = 1,no = 0))
#connected.firms.vals=connected.firms%>%cbind(valuation=valuations)%>%mutate(binbid=ifelse((commoncomp+valuation)<=commoncomp+min_n[1+max(0,ceiling((log(totfirms)-0*rbinom(n=1,size = 1,prob = 0.5))))],yes = 1,no = 0))
submitted.bids.unit=connected.firms.vals%>%filter(binbid==1)%>%as.data.frame()%>%mutate(ID=v,bid=valuation+commoncomp)
#if(nrow(submitted.bids.unit)>0){
#bids.sim=rbind(submitted.bids.unit,bids.sim)
submitted.bids.unit
#}
}
stopCluster(cl)
#3. Select which ones will bid
final.bids=data.frame()
if(length(bids.sim$v.bottom)>0){
for(firm in seq_len(max(bids.sim$v.bottom))) {
firm.possible=bids.sim%>%filter(v.bottom==firm&binbid==1)
firm.truly=  firm.possible%>%arrange(profit)%>%slice(1)
final.bids=rbind(firm.truly,final.bids)
}
}
return(final.bids)
}
bids.sim.diag=createBidSim(simulated.2 = edgelist.period1,errorGov =0.13, sdparam=0.09)
compareModelsDiag<-function(simulated.bids.Model1,simulated.bids.Model2,bids.df.period2,degree.bottom.sim,Model1Name,Model2Name){
diag1=getSimDiag(simulated.bids.Model1,bids.df.period2,degree.bottom.sim,ModelName = Model1Name)
diag2=getSimDiag(simulated.bids.Model2,bids.df.period2,degree.bottom.sim,ModelName = Model2Name)
p1.model1=diag1[[2]]
p2.model1=diag1[[3]]
p3.model1=diag1[[4]]
p1.model2=diag2[[2]]
p2.model2=diag2[[3]]
p3.model2=diag2[[4]]
plot.row=plot_grid(p1.model1, p2.model1,p3.model1, label_size = 7,nrow = 1,ncol=3)
plot.row2=plot_grid(p1.model2, p2.model2,p3.model2, label_size = 7,nrow = 1,ncol = 3)
plot.gid=plot_grid(plot.row,plot.row2,labels = c(Model1Name,Model2Name),label_size=12,nrow = 2,ncol=1,label_x = .005)
plot_comparison=plot_grid(
p1.model1, p2.model1,p3.model1,p1.model2,p2.model2,p3.model2,
align = "h", axis = "b", nrow = 2,ncol=3 #rel_widths = c(1, 2)
)
table.comparison1=diag1[[6]]%>%filter(Type!='Empirical')
table.comparison2=diag2[[6]]
table.comparison=rbind(table.comparison1,table.comparison2)
return(list(plot.gid,table.comparison))
}
createBidSim_Mechanic<-function(edgelist.sim.2,degree.bottom.sim,lambda.df,params.df,lm.mu = lm.mu,lm.sd = lm.sd){
tot_top=nrow(degree.top.sim)
simulated.extra=edgelist.sim.2%>%left_join(degree.bottom.sim)
simulated.bids.Model1=data.frame()
for (v in seq_len(tot_top)) {
connected_firms=simulated.extra%>%filter(v.top==v)
if(nrow(connected_firms>0)){
auction=createAuction(degree.top.single = v,degree.bottom =connected_firms,lambda.df = lambda.df,params.df = params.df,lm.mu = lm.mu,lm.sd = lm.sd)
simulated.bids.Model1=rbind(auction,simulated.bids.Model1)
}
}
return(simulated.bids.Model1)
}
### Simulate Model 1
simulated.bids.Model1=createBidSim_Mechanic(edgelist.sim.2 = simulated.2,degree.bottom.sim = degree.bottom.sim,lambda.df = lambda.df,params.df = params.df,lm.mu = lm.mu,lm.sd = lm.sd)
createBid<-function(nParticipants,degreeBidder,lm.mu,lm.sd){
newdata=data.frame(nParticipants=nParticipants,d=degreeBidder)
sigma=predict(lm.sd,newdata =newdata)
mu=predict(lm.mu,newdata =newdata)
draw=rnorm(n = 1,mean = mu,sd = sigma)
return(draw)
}
### Simulate Model 1
simulated.bids.Model1=createBidSim_Mechanic(edgelist.sim.2 = simulated.2,degree.bottom.sim = degree.bottom.sim,lambda.df = lambda.df,params.df = params.df,lm.mu = lm.mu,lm.sd = lm.sd)
simulated.bids.Model1
### Simulate Model 2
simulated.bids.Model2=createBidSim_NetworkEffects(simulated.2 = simulated.2,errorGov =0.17, sdparam=0.11)
simulated.bids.Model2
### Diagnostics of the simulation
diag_Model1=getSimDiag(simulated.bids.Model1,bids.df.period2 = bids.df.period2,degree.bottom.sim=degree.bottom.sim,ModelName = 'Exogenous')
diag_Model2=getSimDiag(simulated.bids.Model2,bids.df.period2 = bids.df.period2,degree.bottom.sim=degree.bottom.sim,ModelName = 'Endogenous')
### Diagnostics of the simulation
bids.df.period2=df.period1%>%dplyr::select(MCA_MPO,Codigo,RutProveedor)
diag_Model1=getSimDiag(simulated.bids.Model1,bids.df.period2 = bids.df.period2,degree.bottom.sim=degree.bottom.sim,ModelName = 'Exogenous')
getSimDiag<-function(bids.sim.diag,bids.df.period2,degree.bottom.sim,ModelName){
#Fit one. Distribution of bids
hist.sim.bids=bids.sim.diag%>%mutate(Type='Predicted')%>%dplyr::select(v.bottom,bid,Type)
bids.simple.df.period2=bids.df.period2%>%rename(bid=MCA_MPO,v.bottom=RutProveedor)%>%mutate(Type='Empirical')%>%dplyr::select(v.bottom,bid,Type)
comparison.bids=rbind(hist.sim.bids,bids.simple.df.period2)
#plot1<-ggplot(hist.sim.bids,aes(x=bid))+geom_histogram(aes(y=..density..),alpha=0.7,fill='steelblue')+geom_histogram(aes(x=bid,y=..density..),data=,bids.simple.df.period2,fill='red',alpha=0.5)+xlim(0,2)
p1<-ggplot(comparison.bids,aes(x=bid))+geom_histogram(aes(y=..density..,fill=Type),alpha=1)+xlim(0,2)+
theme_bw()+theme(legend.title = element_blank(),legend.position=c(.8,.75),legend.box.background = element_rect(colour = "black"),legend.background = element_blank())+ylab('Density')+xlab('Bids')
#Fit two. Biider participation
bids.sim.participants=bids.sim.diag%>%group_by(ID)%>%mutate(participants=length(ID))%>%group_by(participants)%>%summarise(n=length(ID),bid.average=mean(bid),bid.sd=sd(bid))%>%mutate(type='Predicted')
bids.period2.participants=bids.df.period2%>%group_by(ID=Codigo)%>%mutate(participants=length(ID))%>%group_by(participants)%>%summarise(n=length(ID),bid.average=mean(MCA_MPO),bid.sd=sd(MCA_MPO))%>%mutate(type='Empirical')
comparison.bids.participants=rbind(bids.sim.participants,bids.period2.participants)%>%group_by(type)%>%mutate(n=n/sum(n))
p2<-ggplot(comparison.bids.participants,aes(x=participants,y=n,fill=type))+geom_bar(stat = 'identity',position = 'dodge')+xlim(0,20)+
theme_bw()+theme(legend.title = element_blank(),legend.position=c(.8,.75),legend.box.background = element_rect(colour = "black"),legend.background = element_blank())+ylab('Density')+xlab('Participants')
#Measure 1. Efficiency vs Number of Bidders.
bids.sim.participants=bids.sim.diag%>%group_by(ID)%>%mutate(participants=length(ID))%>%group_by(participants)%>%summarise(n=length(ID),bid.average=mean(bid),bid.sd=sd(bid))%>%mutate(type='Predicted')
bids.period2.participants=bids.df.period2%>%group_by(ID=Codigo)%>%mutate(participants=length(ID))%>%group_by(participants)%>%summarise(n=length(ID),bid.average=mean(MCA_MPO),bid.sd=sd(MCA_MPO))%>%mutate(type='Empirical')
comparison.bids.participants=rbind(bids.sim.participants,bids.period2.participants)
p3<-ggplot(comparison.bids.participants,aes(x=(participants),y=bid.average,color=type))+
geom_point()+xlim(0,15)+theme_bw()+
theme(legend.title = element_blank(),legend.position=c(.2,.25),legend.box.background = element_rect(colour = "black"),legend.background = element_blank())+
ylab('Average Bid')+xlab('Participants')+geom_smooth(se=F,method = 'lm',alpha=0.5)
#Efficiency vs Degree.
bids.sim.participants=bids.sim.diag%>%left_join(degree.bottom.sim)%>%group_by(d)%>%summarise(n=length(ID),bid.average=mean(bid),bid.sd=sd(bid))%>%mutate(type='Predicted')
bids.period2.participants=bids.df.period2%>%left_join(degree.bottom.2)%>%group_by(d)%>%summarise(n=length(Codigo),bid.average=mean(MCA_MPO),bid.sd=sd(MCA_MPO))%>%mutate(type='Empirical')
comparison.bids.participants=rbind(bids.sim.participants,bids.period2.participants)
p4<-ggplot(comparison.bids.participants,aes(x=(d),y=bid.average,color=type))+
geom_point()+xlim(0,15)+geom_line()+
theme_bw()+  theme(legend.title = element_blank(),legend.position=c(.8,.75),legend.box.background = element_rect(colour = "black"),legend.background = element_blank())+
ylab('Average Bid')+xlab('Degree')
###Table of measures
#Measure: bid average and sd, participant average sd, distance between distributions.
bids.stats.sim=bids.sim.diag%>%summarise(mean.bid=mean(bid),sd.bid=sd(bid))
bids.stats.2=bids.df.period2%>%summarise(mean.bid=mean(MCA_MPO),sd.bid=sd(MCA_MPO))
c1=rbind(bids.stats.sim,bids.stats.2)
participant.stats.sim=bids.sim.diag%>%group_by(ID)%>%summarise(participants=length(ID))%>%summarise(mean.participants=mean(participants),sd.participants=sd(participants))
participant.stats.2=bids.df.period2%>%group_by(Codigo)%>%summarise(participants=length(Codigo))%>%summarise(mean.participants=mean(participants),sd.participants=sd(participants))
c2=rbind(participant.stats.sim,participant.stats.2)
m1=bids.sim.diag$bid
m.real=bids.df.period2$MCA_MPO
dist1=wasserstein_metric(x=m1, y=m.real,p = 2)
dist2=wasserstein_metric(x=m.real, y=m.real,p = 2)
dist=rbind(dist1,dist2)
comparison.table=data.frame(c1,c2,dist)%>%cbind(Type=c(ModelName,'Empirical'))%>%dplyr::mutate_if(is.numeric, funs((signif(., 3))))
pgrid=plot_grid(p1, p2,p3,p4, labels = c('1', '2','3','4'))
return(list(pgrid,p1,p2,p3,p4,comparison.table))
}
diag_Model1=getSimDiag(simulated.bids.Model1,bids.df.period2 = bids.df.period2,degree.bottom.sim=degree.bottom.sim,ModelName = 'Exogenous')
diag_Model2=getSimDiag(simulated.bids.Model2,bids.df.period2 = bids.df.period2,degree.bottom.sim=degree.bottom.sim,ModelName = 'Endogenous')
diag_compare=compareModelsDiag(simulated.bids.Model1 = simulated.bids.Model1,simulated.bids.Model2=simulated.bids.Model2,bids.df.period2 = bids.df.period2,
degree.bottom.sim=degree.bottom.sim,Model1Name = 'Exogenous',Model2Name = 'Endogenous')
diag_compare_plot=diag_compare[[1]]
diag_compare_table=diag_compare[[2]]
diag_compare_plot
